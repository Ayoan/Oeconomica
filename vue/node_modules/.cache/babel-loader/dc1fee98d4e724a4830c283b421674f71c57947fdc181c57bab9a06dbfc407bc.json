{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'Graph',\n  // props: ['oeconomicas','year_month'],\n  // props: ['year_month'],\n  data() {\n    return {\n      myChart: \"\",\n      balanceBarData: [],\n      inTotal: 0,\n      outTotal: 0,\n      profit: 0,\n      barData: {},\n      options: {\n        responsive: false,\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        indexAxis: 'y',\n        maintainAspectRatio: false\n        // scales: {\n        //     x: {\n        //         min: 0,\n        //         max: 300000,\n        //     }\n        // },\n      }\n    };\n  },\n\n  // created:function () {\n  //     console.log(this.oeconomicas);\n  //     this.calcBalance(this.oeconomicas);\n  // },\n  // mounted() {\n  //     this.createGraph();\n  //     // updateGraph(this.oeconomicas);\n  // },\n  methods: {\n    firstAction: function (data) {\n      this.oeconomicas = data;\n      this.updateGraph(this.oeconomicas);\n    },\n    calcBalance: function (data) {\n      var outTotal = 0;\n      var inTotal = 0;\n      for (var index = 0; index < data.length; index++) {\n        var amount = this.replaceAmount(data[index]['amount']);\n        if (data[index]['balance'] == \"支出\") {\n          var outTotal = outTotal + Number(amount);\n        } else if (data[index]['balance'] == \"収入\") {\n          var inTotal = inTotal + Number(amount);\n        }\n      }\n      this.balanceBarData = [inTotal, outTotal];\n      this.setBarData();\n      this.inTotal = this.csAmount(this.balanceBarData[0]);\n      this.outTotal = this.csAmount(this.balanceBarData[1]);\n      this.profit = this.csAmount(this.balanceBarData[0] - this.balanceBarData[1]);\n\n      // 収支計のデータのフォントの色を黒字か赤字かで変更する。\n      // var obfProfit = document.getElementById(\"td-profit\");\n      // if ( (this.balanceBarData[0] - this.balanceBarData[1]) > 0 ) {\n      //     obfProfit.style.color = '#0000FF'; \n      // } else if ( (this.balanceBarData[0] - this.balanceBarData[1]) < 0 ) {\n      //     obfProfit.style.color = '#FF0000';\n      // }\n    },\n\n    csAmount: function (amount) {\n      return amount.toLocaleString();\n    },\n    replaceAmount: function (amount) {\n      // 1,000のようにカンマがある状態でも変更できるようにする関数\n      if (amount.match(/,/)) {\n        var amount = amount.replace(\",\", \"\");\n      }\n      return amount;\n    },\n    setBarData: function () {\n      this.barData = {\n        labels: ['収入', '支出'],\n        datasets: [{\n          // label: ['yen'],\n          data: this.balanceBarData,\n          backgroundColor: ['#4169e1', '#f87979']\n          // borderWidth: 100,\n          // backgroundColor: '#f87979'\n        }]\n      };\n    },\n\n    createGraph: function () {\n      const ctx = document.getElementById('myChart').getContext('2d');\n      this.myChart = new Chart(ctx, {\n        type: 'bar',\n        data: this.barData,\n        options: this.options\n      });\n    },\n    updateGraph: function (data) {\n      if (this.myChart) {\n        // Destroy the existing chart instance\n        this.myChart.destroy();\n      }\n      // Recalculate amount of each balance.\n      this.calcBalance(data);\n      // Create a new chart instance\n      this.createGraph();\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","name","data","myChart","balanceBarData","inTotal","outTotal","profit","barData","options","responsive","plugins","legend","display","indexAxis","maintainAspectRatio","methods","firstAction","oeconomicas","updateGraph","calcBalance","index","length","amount","replaceAmount","Number","setBarData","csAmount","toLocaleString","match","replace","labels","datasets","backgroundColor","createGraph","ctx","document","getElementById","getContext","type","destroy"],"sources":["/app/src/components/Graph.vue"],"sourcesContent":["<template>\n    <h3 id=\"balanceBar\">収支データ</h3>\n    <!-- <section id=\"balanceTable\"> -->\n        <table class=\"balanceTable\">\n            <tr><th>収入計</th><td class=\"inTotal\">¥ {{ inTotal }}</td></tr>\n            <tr><th>支出計</th><td class=\"outTotal\">¥ {{ outTotal }}</td></tr>\n            <!-- <div id=\"td-profit\"> -->\n            <tr><th>収支計</th><td>¥ {{ profit }}</td></tr>\n            <!-- </div> -->\n        </table>\n    <!-- </section> -->\n    <div>\n        <canvas id=\"myChart\" width=\"1400\" height=\"200\"></canvas>\n    </div>\n</template>\n\n<script>\nimport { Chart, registerables } from 'chart.js'; \nChart.register(...registerables);\nexport default {\n    name: 'Graph',\n    // props: ['oeconomicas','year_month'],\n    // props: ['year_month'],\n    data () {\n        return {\n            myChart:\"\",\n            balanceBarData: [],\n            inTotal: 0,\n            outTotal: 0,\n            profit: 0,\n            barData: {},\n            options: {\n                responsive: false,\n                plugins: {\n                    legend: {\n                        display: false,\n                    }\n                },\n                indexAxis: 'y',\n                maintainAspectRatio: false,\n                // scales: {\n                //     x: {\n                //         min: 0,\n                //         max: 300000,\n                //     }\n                // },\n            },    \n        }\n    },\n    // created:function () {\n    //     console.log(this.oeconomicas);\n    //     this.calcBalance(this.oeconomicas);\n    // },\n    // mounted() {\n    //     this.createGraph();\n    //     // updateGraph(this.oeconomicas);\n    // },\n    methods: {\n        firstAction: function(data){\n            this.oeconomicas = data;\n            this.updateGraph(this.oeconomicas);\n        },\n        calcBalance: function(data) {\n            var outTotal = 0;\n            var inTotal = 0;\n            for(var index=0; index < data.length; index++) {\n                var amount = this.replaceAmount(data[index]['amount']);\n                if ( data[index]['balance'] == \"支出\" ) {\n                    var outTotal = outTotal + Number(amount);\n                } else if ( data[index]['balance'] == \"収入\" ) {\n                    var inTotal = inTotal + Number(amount);\n                }\n            }\n            this.balanceBarData = [inTotal, outTotal];\n            this.setBarData();  \n\n            this.inTotal = this.csAmount(this.balanceBarData[0]);\n            this.outTotal = this.csAmount(this.balanceBarData[1]);\n            this.profit = this.csAmount(this.balanceBarData[0] - this.balanceBarData[1]);\n\n            // 収支計のデータのフォントの色を黒字か赤字かで変更する。\n            // var obfProfit = document.getElementById(\"td-profit\");\n            // if ( (this.balanceBarData[0] - this.balanceBarData[1]) > 0 ) {\n            //     obfProfit.style.color = '#0000FF'; \n            // } else if ( (this.balanceBarData[0] - this.balanceBarData[1]) < 0 ) {\n            //     obfProfit.style.color = '#FF0000';\n            // }\n\n        },\n        csAmount: function(amount) {\n            return amount.toLocaleString();\n        },\n        replaceAmount: function(amount) {\n            // 1,000のようにカンマがある状態でも変更できるようにする関数\n            if ( amount.match(/,/)) {\n                var amount = amount.replace(\",\", \"\");\n            } \n            return amount;\n        },\n        setBarData: function(){\n            this.barData = {\n                labels: ['収入', '支出'],\n                datasets: [\n                    {\n                        // label: ['yen'],\n                        data: this.balanceBarData,\n                        backgroundColor:['#4169e1','#f87979'],\n                        // borderWidth: 100,\n                        // backgroundColor: '#f87979'\n                    }\n                ]\n            }\n        },\n        createGraph: function() {\n            const ctx = document.getElementById('myChart').getContext('2d');\n            this.myChart = new Chart(ctx, {\n                type: 'bar',\n                data: this.barData,\n                options: this.options,\n            });\n        },\n        updateGraph: function(data) {\n            if (this.myChart) {\n                // Destroy the existing chart instance\n                this.myChart.destroy();\n            }\n            // Recalculate amount of each balance.\n            this.calcBalance(data);\n            // Create a new chart instance\n            this.createGraph();\n        },\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}