{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { callExpression } from '@babel/types';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'Graph',\n  // props: ['oeconomicas','year_month'],\n  data() {\n    return {\n      myChart: \"\",\n      balanceBarData: [],\n      eCategoryList: [],\n      inTotal: 0,\n      outTotal: 0,\n      profit: 0,\n      barData: {},\n      eCategoryTotals: {},\n      options: {\n        responsive: false,\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        indexAxis: 'y',\n        maintainAspectRatio: false\n        // scales: {\n        //     x: {\n        //         min: 0,\n        //         max: 300000,\n        //     }\n        // },\n      }\n    };\n  },\n\n  // created:function () {\n  //     console.log(this.oeconomicas);\n  //     this.calcBalance(this.oeconomicas);\n  // },\n  // mounted() {\n  //     this.createGraph();\n  //     // updateGraph(this.oeconomicas);\n  // },\n  methods: {\n    firstAction: function (data, categories) {\n      this.oeconomicas = data;\n      this.updateGraph(this.oeconomicas);\n      this.eCategoryList = this.sortCategoryName(categories[0]);\n      this.eCategoryTotals = this.calcCategoryData(this.eCategoryList);\n    },\n    calcBalance: function (data) {\n      var outAmount = 0;\n      var inAmount = 0;\n      for (var index = 0; index < data.length; index++) {\n        var amount = this.replaceAmount(data[index]['amount']);\n        if (data[index]['balance'] == \"支出\") {\n          outAmount = outAmount + Number(amount);\n        } else if (data[index]['balance'] == \"収入\") {\n          inAmount = inAmount + Number(amount);\n        }\n      }\n      this.balanceBarData = [inAmount, outAmount];\n      this.setBarData();\n\n      // 金額にカンマをつける\n      this.inTotal = this.csAmount(this.balanceBarData[0]);\n      this.outTotal = this.csAmount(this.balanceBarData[1]);\n      this.profit = this.csAmount(this.balanceBarData[0] - this.balanceBarData[1]);\n\n      // 収支計の金額のフォントの色を黒字か赤字かで変更する。\n      var objProfit = document.getElementById(\"td-profit\");\n      if (this.balanceBarData[0] - this.balanceBarData[1] > 0) {\n        objProfit.style.color = '#0000FF';\n      } else if (this.balanceBarData[0] - this.balanceBarData[1] < 0) {\n        objProfit.style.color = '#FF0000';\n      }\n    },\n    csAmount: function (amount) {\n      return amount.toLocaleString();\n    },\n    replaceAmount: function (amount) {\n      // 1,000のようにカンマがある状態でも変更できるようにする関数\n      if (amount.match(/,/)) {\n        amount = amount.replace(\",\", \"\");\n      }\n      return amount;\n    },\n    setBarData: function () {\n      this.barData = {\n        labels: ['収入', '支出'],\n        datasets: [{\n          // label: ['yen'],\n          data: this.balanceBarData,\n          backgroundColor: ['#4169e1', '#f87979']\n        }]\n      };\n    },\n    createGraph: function () {\n      const ctx = document.getElementById('myChart').getContext('2d');\n      this.myChart = new Chart(ctx, {\n        type: 'bar',\n        data: this.barData,\n        options: this.options\n      });\n    },\n    updateGraph: function (data) {\n      if (this.myChart) {\n        // Destroy the existing chart instance\n        this.myChart.destroy();\n      }\n      // Recalculate amount of each balance.\n      this.calcBalance(data);\n      // Create a new chart instance\n      this.createGraph();\n    },\n    sortCategoryName: function (expenceCategories) {\n      // 登録されているカテゴリを抽出\n      var categoryArray = [];\n      for (var i = 0; i < this.oeconomicas.length; i++) {\n        categoryArray.push(this.oeconomicas[i]['category']);\n      }\n      // 重複排除\n      const categoryList = Array.from(new Set(categoryArray));\n      // ソート\n      var categoryList2 = [];\n      for (var i = 0; i < expenceCategories.length; i++) {\n        for (var j = 0; j < categoryList.length; j++) {\n          if (expenceCategories[i] == categoryList[j]) {\n            categoryList2.push(categoryList[j]);\n          }\n        }\n      }\n      return categoryList2;\n    },\n    calcCategoryData: function (categoryList) {\n      var categoryTotals = {};\n      // オブジェクトにプロパティを追加,初期化\n      for (var i = 0; i < categoryList.length; i++) {\n        categoryTotals[categoryList[i]] = 0;\n      }\n      for (const category in categoryTotals) {\n        for (var j = 0; j < this.oeconomicas.length; j++) {\n          if (category == this.oeconomicas[j]['category']) {\n            categoryTotals[category] = categoryTotals[category] + this.oeconomicas[j]['amount'];\n          }\n        }\n      }\n      return categoryTotals;\n    }\n  }\n};","map":{"version":3,"names":["callExpression","Chart","registerables","register","name","data","myChart","balanceBarData","eCategoryList","inTotal","outTotal","profit","barData","eCategoryTotals","options","responsive","plugins","legend","display","indexAxis","maintainAspectRatio","methods","firstAction","categories","oeconomicas","updateGraph","sortCategoryName","calcCategoryData","calcBalance","outAmount","inAmount","index","length","amount","replaceAmount","Number","setBarData","csAmount","objProfit","document","getElementById","style","color","toLocaleString","match","replace","labels","datasets","backgroundColor","createGraph","ctx","getContext","type","destroy","expenceCategories","categoryArray","i","push","categoryList","Array","from","Set","categoryList2","j","categoryTotals","category"],"sources":["/app/src/components/Graph.vue"],"sourcesContent":["<template>\n    <h3 id=\"balanceBar\">収支データ</h3>\n    <table class=\"balanceTable\">\n        <tr><th>収入計</th><td class=\"inTotal\">¥ {{ inTotal }}</td></tr>\n        <tr><th>支出計</th><td class=\"outTotal\">¥ {{ outTotal }}</td></tr>\n        <tr><th>収支計</th><td id=\"td-profit\">¥ {{ profit }}</td></tr>\n    </table>\n    <div>\n        <canvas id=\"myChart\" width=\"1400\" height=\"200\"></canvas>\n    </div>\n\n    <h3 id=\"categoryData\">カテゴリ別</h3>\n    <h4>支出</h4>\n    <table class=\"catogoryTable\">\n        <tr v-for=\"eCategory in eCategoryList\"> \n            <th>{{ eCategory }}</th><td class=\"categoryTotal\">¥ {{ eCategoryTotals.eCategory }}</td>\n        </tr>\n    </table>\n</template>\n\n<script>\nimport { callExpression } from '@babel/types';\nimport { Chart, registerables } from 'chart.js'; \nChart.register(...registerables);\nexport default {\n    name: 'Graph',\n    // props: ['oeconomicas','year_month'],\n    data () {\n        return {\n            myChart:\"\",\n            balanceBarData: [],\n            eCategoryList: [],\n            inTotal: 0,\n            outTotal: 0,\n            profit: 0,\n            barData: {},\n            eCategoryTotals: {},\n            options: {\n                responsive: false,\n                plugins: {\n                    legend: {\n                        display: false,\n                    }\n                },\n                indexAxis: 'y',\n                maintainAspectRatio: false,\n                // scales: {\n                //     x: {\n                //         min: 0,\n                //         max: 300000,\n                //     }\n                // },\n            },    \n        }\n    },\n    // created:function () {\n    //     console.log(this.oeconomicas);\n    //     this.calcBalance(this.oeconomicas);\n    // },\n    // mounted() {\n    //     this.createGraph();\n    //     // updateGraph(this.oeconomicas);\n    // },\n    methods: {\n        firstAction: function(data,categories){\n            this.oeconomicas = data;\n            this.updateGraph(this.oeconomicas);\n            this.eCategoryList = this.sortCategoryName(categories[0]);\n            this.eCategoryTotals = this.calcCategoryData(this.eCategoryList)\n        },\n        calcBalance: function(data) {\n            var outAmount = 0;\n            var inAmount = 0;\n            for(var index=0; index < data.length; index++) {\n                var amount = this.replaceAmount(data[index]['amount']);\n                if ( data[index]['balance'] == \"支出\" ) {\n                    outAmount = outAmount + Number(amount);\n                } else if ( data[index]['balance'] == \"収入\" ) {\n                    inAmount = inAmount + Number(amount);\n                }\n            }\n            this.balanceBarData = [inAmount, outAmount];\n            this.setBarData();  \n\n            // 金額にカンマをつける\n            this.inTotal = this.csAmount(this.balanceBarData[0]);\n            this.outTotal = this.csAmount(this.balanceBarData[1]);\n            this.profit = this.csAmount(this.balanceBarData[0] - this.balanceBarData[1]);\n\n            // 収支計の金額のフォントの色を黒字か赤字かで変更する。\n            var objProfit = document.getElementById(\"td-profit\");\n            if ( (this.balanceBarData[0] - this.balanceBarData[1]) > 0 ) {\n                objProfit.style.color = '#0000FF'; \n            } else if ( (this.balanceBarData[0] - this.balanceBarData[1]) < 0 ) {\n                objProfit.style.color = '#FF0000';\n            } \n\n        },\n        csAmount: function(amount) {\n            return amount.toLocaleString();\n        },\n        replaceAmount: function(amount) {\n            // 1,000のようにカンマがある状態でも変更できるようにする関数\n            if ( amount.match(/,/)) {\n                amount = amount.replace(\",\", \"\");\n            } \n            return amount;\n        },\n        setBarData: function(){\n            this.barData = {\n                labels: ['収入', '支出'],\n                datasets: [\n                    {\n                        // label: ['yen'],\n                        data: this.balanceBarData,\n                        backgroundColor:['#4169e1','#f87979'],\n                    }\n                ]\n            }\n        },\n        createGraph: function() {\n            const ctx = document.getElementById('myChart').getContext('2d');\n            this.myChart = new Chart(ctx, {\n                type: 'bar',\n                data: this.barData,\n                options: this.options,\n            });\n        },\n        updateGraph: function(data) {\n            if (this.myChart) {\n                // Destroy the existing chart instance\n                this.myChart.destroy();\n            }\n            // Recalculate amount of each balance.\n            this.calcBalance(data);\n            // Create a new chart instance\n            this.createGraph();\n        },\n        sortCategoryName: function(expenceCategories) {\n            // 登録されているカテゴリを抽出\n            var categoryArray = [];\n            for(var i=0; i < this.oeconomicas.length; i++) {\n                categoryArray.push(this.oeconomicas[i]['category']);\n            }\n            // 重複排除\n            const categoryList = Array.from(new Set(categoryArray));\n            // ソート\n            var categoryList2 = [];\n            for(var i=0; i < expenceCategories.length; i++) {\n                for(var j=0; j < categoryList.length; j++) {\n                    if ( expenceCategories[i] == categoryList[j] ) {\n                        categoryList2.push(categoryList[j]);\n                    }\n                }\n            }\n            return categoryList2;\n        },\n        calcCategoryData: function(categoryList) {\n            var categoryTotals = {};\n            // オブジェクトにプロパティを追加,初期化\n            for(var i=0; i < categoryList.length; i++) {\n                categoryTotals[categoryList[i]] = 0;\n            }\n            for(const category in categoryTotals) {\n                for(var j=0; j < this.oeconomicas.length; j++) {\n                    if ( category == this.oeconomicas[j]['category'] ) {\n                        categoryTotals[category] = categoryTotals[category] + this.oeconomicas[j]['amount'];\n                    }\n                }\n            }\n            return categoryTotals;\n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}