{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'Option',\n  data() {\n    return {\n      subCategory: \"-選択してください-\",\n      balance: \"-選択してください-\",\n      income: \"収入\",\n      expence: \"支出\",\n      incomeCategories: [],\n      expenceCategories: [],\n      subscriptions: [],\n      day: \"\",\n      subscription: \"\",\n      category: \"\",\n      amount: \"\"\n    };\n  },\n  methods: {\n    firstAction: function () {\n      this.getSubscriptions();\n      // this.getCategories();\n    },\n\n    getSubscriptions: async function () {\n      try {\n        const result = await axios.get(\"/subscription/\");\n        this.subscriptions = result.data;\n      } catch (err) {\n        console.log(err);\n        alert(JSON.stringify(err));\n      }\n    },\n    getCategories: async function () {\n      try {\n        let result = await axios.get(\"/category/\", {\n          params: {\n            balance: this.income\n          }\n        });\n        this.incomeCategories = result.data;\n        result = await axios.get(\"/category/\", {\n          params: {\n            balance: this.expence\n          }\n        });\n        this.expenceCategories = result.data;\n      } catch (err) {\n        console.log(err);\n        alert(JSON.stringify(err));\n      }\n    },\n    registSubscription: async function () {\n      try {\n        if (this.day != \"\" && this.balance != \"\") {\n          const result = await axios.post(\"/subscription/\", {\n            day: this.day,\n            category: this.subCategory,\n            subscription: this.subscription,\n            amount: this.amount\n          });\n          this.subscriptions.push(result.data); //配列の末尾に要素追加\n          this.subscriptions.sort((a, b) => a.day - b.day); //日付順にソート\n          // 入力欄をリセットする\n          this.day = \"\";\n          this.subCategory = \"-選択してください-\";\n          this.subscription = \"\";\n          this.amount = \"\";\n        }\n      } catch (err) {\n        console.log(err);\n        alert(JSON.stringify(err));\n      }\n    },\n    registCategory: async function () {\n      try {\n        if (this.category != \"\" && this.balance != \"\") {\n          console.log(\"start inserting categories\");\n          const result = await axios.post(\"/category/\", {\n            category: this.category,\n            balance: this.balance\n          });\n          if (this.balance == \"収入\") {\n            this.incomeCategories.push(result.data); //配列の末尾に要素追加\n          } else if (this.balance == \"支出\") {\n            this.expenceCategories.push(result.data); //配列の末尾に要素追加\n          }\n          // 入力欄をリセットする\n          this.category = \"\";\n          this.balance = \"-選択してください-\";\n        }\n      } catch (err) {\n        console.log(err);\n        alert(JSON.stringify(err));\n      }\n    },\n    deleteSubscription: async function (id, index) {\n      try {\n        await axios.delete(\"/subscription/\" + id);\n        this.subscriptions.splice(index, 1);\n      } catch (err) {\n        console.log(err);\n        alert(JSON.stringify(err));\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","Chart","registerables","register","name","data","subCategory","balance","income","expence","incomeCategories","expenceCategories","subscriptions","day","subscription","category","amount","methods","firstAction","getSubscriptions","result","get","err","console","log","alert","JSON","stringify","getCategories","params","registSubscription","post","push","sort","a","b","registCategory","deleteSubscription","id","index","delete","splice"],"sources":["/app/src/components/Option.vue"],"sourcesContent":["<template>\n    <h3>サブスク</h3>\n    <table class=\"subscriptionTable\">\n        <tr>\n            <th>支払日</th>\n            <th>カテゴリ</th>\n            <th>サービス名</th>\n            <th>金額</th>\n            <th style=\"display:none;background:#EEEEEE\">dummy</th>\n        </tr>\n        <tr id=\"inputRow\">\n            <td>\n                毎月\n                <select name=\"daySelect\" id=\"daySelect\" v-model=\"day\">\n                    <option value=\"\"></option>\n                    <option v-for=\"mm in 31\">{{ mm }}</option>\n                </select>\n                日</td>\n            <td>\n                <select v-model=\"subCategory\">\n                    <option>-選択してください-</option>                            \n                    <option v-for=\"(cg, index) in expenceCategories\" :key=\"index\" v-bind:value=\"cg\">{{ cg }}</option>\n                </select>\n            </td>\n            <td><input type=\"text\" v-model=\"subscription\"/></td>\n            <td><input type=\"number\" v-model=\"amount\" style=\"width: 40%;\"/>円</td>\n            <td>\n                <button class=\"add-button\" @click=\"registSubscription\">＋</button> <!-- The + button -->\n            </td>\n        </tr>\n        <tr v-for=\"(subscription, index) in subscriptions\" :key=\"subscription.id\">\n            <td>毎月 {{ subscription.day }} 日</td>\n            <td>{{ subscription.category }}</td>\n            <td>{{ subscription.subscription }}</td>\n            <td>{{ subscription.amount }} 円</td>\n            <td>\n                <button class=\"del-button\" @click=\"deleteSubscription(subscription.id, index)\">ー</button> <!-- The + button -->\n            </td>\n        </tr>\n    </table>\n\n    <h3>カテゴリー</h3>\n    <table class=\"categoryAddTable\">\n        <tr>\n            <td><input type=\"text\" v-model=\"category\" placeholder=\"カテゴリを入力\"/></td>\n            <td>\n                <select v-model=\"balance\">\n                    <option>-選択してください-</option>                            \n                    <option>支出</option>\n                    <option>収入</option>\n                </select>\n            </td>\n            <td>\n                <button class=\"add-button\" @click=\"registCategory\">＋</button> <!-- The + button -->\n            </td>\n        </tr>\n    </table>\n    \n\n    <div class=\"balanceTable-container\">\n      <table>\n        <thead>\n          <tr class=\"IncomeTable\">\n            <th>{{ income }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(incomeCategory, index) in incomeCategories\" :key=\"incomeCategory.id\">\n            <td>{{ incomeCategory.category }}</td>\n            <td><button class=\"del-button\" @click=\"deleteCategory(incomeCategory.id, index)\">ー</button></td>\n          </tr>\n        </tbody>\n      </table>\n      <table>\n        <thead>\n          <tr class=\"expenceTable\">\n            <th>{{ expence }}</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr v-for=\"(expenceCategory, index) in expenceCategories\" :key=\"expenceCategory.id\">\n                <td>{{ expenceCategory.category }}</td>\n            <td><button class=\"del-button\" @click=\"deleteCategory(expenceCategory.id, index)\">ー</button></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n</template>\n\n\n<script>\nimport axios from \"axios\";\nimport { Chart, registerables } from 'chart.js'; \nChart.register(...registerables);\nexport default {\n    name: 'Option',\n    data () {   \n        return {\n            subCategory:\"-選択してください-\",\n            balance: \"-選択してください-\" ,\n            income:\"収入\",\n            expence:\"支出\",\n            incomeCategories:[],\n            expenceCategories: [],\n            subscriptions: [],\n            day:\"\",\n            subscription:\"\",\n            category:\"\",\n            amount:\"\",\n        }\n    },\n    methods: {\n        firstAction: function(){\n            this.getSubscriptions();\n            // this.getCategories();\n        },\n        getSubscriptions: async function() {\n            try {\n                const result = await axios.get(\"/subscription/\");\n                this.subscriptions = result.data;\n            } catch (err) {\n                console.log(err);\n                alert(JSON.stringify(err));\n            }\n        },\n        getCategories: async function() {\n            try {\n                let result = await axios.get(\"/category/\",{\n                    params: {\n                        balance: this.income\n                    }\n                });\n                this.incomeCategories = result.data;\n                result = await axios.get(\"/category/\",{\n                    params: {\n                        balance: this.expence\n                    }\n                });\n                this.expenceCategories = result.data;\n            } catch (err) {\n                console.log(err);\n                alert(JSON.stringify(err));\n            }\n        },\n        registSubscription: async function () {\n            try {\n                if(this.day != \"\" && this.balance != \"\"){\n                    const result = await axios.post(\"/subscription/\", {\n                        day: this.day,\n                        category: this.subCategory,\n                        subscription: this.subscription,\n                        amount: this.amount,\n                    });\n                    this.subscriptions.push(result.data); //配列の末尾に要素追加\n                    this.subscriptions.sort((a, b) => a.day - b.day); //日付順にソート\n                    // 入力欄をリセットする\n                    this.day = \"\";\n                    this.subCategory = \"-選択してください-\";\n                    this.subscription = \"\";\n                    this.amount = \"\";\n                }\n            } catch (err) {\n                console.log(err)\n                alert(JSON.stringify(err));\n            }\n        },\n        registCategory: async function () {\n            try {\n                if(this.category != \"\" && this.balance != \"\"){\n                    console.log(\"start inserting categories\")\n                    const result = await axios.post(\"/category/\", {\n                        category: this.category,\n                        balance: this.balance\n                    });\n                    if (this.balance == \"収入\"){\n                        this.incomeCategories.push(result.data); //配列の末尾に要素追加\n                    } else if (this.balance == \"支出\"){\n                        this.expenceCategories.push(result.data); //配列の末尾に要素追加\n                    }\n                    // 入力欄をリセットする\n                    this.category = \"\";\n                    this.balance = \"-選択してください-\";\n                }\n            } catch (err) {\n                console.log(err)\n                alert(JSON.stringify(err));\n            }\n        },\n        deleteSubscription: async function (id, index) {\n            try {\n                await axios.delete(\"/subscription/\" + id);\n                this.subscriptions.splice(index, 1);\n            } catch (err) {\n                console.log(err)\n                alert(JSON.stringify(err));\n            }\n        },\n        \n    },\n}\n\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}